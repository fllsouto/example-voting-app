version: "3"
services:

  vote:
    build: ./vote
    image: soutoxfll/example-voting-app_vote
    command: python app.py
    volumes:
      - vote-data:/app
    ports:
      - "5000:80"
    networks:
      - front-tier
      - back-tier
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.j
    image: soutoxfll/example-voting-app_worker
    networks:
      - back-tier
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
#      placement:
#        constraints: [node.role == worker]    

  redis:
    image: redis:alpine
    networks:
      - back-tier
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.4
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - back-tier
    deploy:
      placement:
        constraints: [node.role == manager]

  result:
    build: ./result
    image: soutoxfll/example-voting-app_result
    command: nodemon server.js
    volumes:
      - result-data:/app
    ports:
      - "5001:80"
    networks:
      - front-tier
      - back-tier
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
#      placement:
#        constraints: [node.role == worker]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      mode: global

networks:
  front-tier:
  back-tier:

volumes:
  db-data:
  result-data:
  vote-data:
